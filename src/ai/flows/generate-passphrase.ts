// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview A passphrase generation AI agent.
 *
 * - generatePassphrase - A function that handles the passphrase generation process.
 * - GeneratePassphraseInput - The input type for the generatePassphrase function.
 * - GeneratePassphraseOutput - The return type for the generatePassphrase function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GeneratePassphraseInputSchema = z.object({
  length: z
    .number()
    .default(16)
    .describe('The desired length of the passphrase.  Defaults to 16.'),
  includeSymbols: z
    .boolean()
    .default(true)
    .describe('Whether to include symbols in the passphrase. Defaults to true.'),
  includeNumbers: z
    .boolean()
    .default(true)
    .describe('Whether to include numbers in the passphrase. Defaults to true.'),
  customWordInclusion: z
    .string()
    .optional()
    .describe(
      'Optional words or phrases to include in the passphrase to make it more memorable.'
    ),
});
export type GeneratePassphraseInput = z.infer<typeof GeneratePassphraseInputSchema>;

const GeneratePassphraseOutputSchema = z.object({
  passphrase: z.string().describe('The generated passphrase.'),
  recoveryPrompt: z
    .string()
    .describe(
      'A recovery prompt question that can be used to remember the passphrase.'
    ),
});
export type GeneratePassphraseOutput = z.infer<typeof GeneratePassphraseOutputSchema>;

export async function generatePassphrase(input: GeneratePassphraseInput): Promise<GeneratePassphraseOutput> {
  return generatePassphraseFlow(input);
}

const prompt = ai.definePrompt({
  name: 'generatePassphrasePrompt',
  input: {schema: GeneratePassphraseInputSchema},
  output: {schema: GeneratePassphraseOutputSchema},
  prompt: `You are a security expert specializing in generating strong and memorable passphrases.

  Generate a passphrase based on the following criteria:
  - Length: {{length}} characters
  - Include symbols: {{includeSymbols}}
  - Include numbers: {{includeNumbers}}
  {{#if customWordInclusion}}
  - Custom words/phrases: {{customWordInclusion}}
  {{/if}}

  Also generate a recovery prompt question that the user can easily remember to help them recall the passphrase if they forget it. The recovery prompt should be closely related to the passphrase and easy to remember.
  `,
});

const generatePassphraseFlow = ai.defineFlow(
  {
    name: 'generatePassphraseFlow',
    inputSchema: GeneratePassphraseInputSchema,
    outputSchema: GeneratePassphraseOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
